// 3270. 求出数字答案
// 简单 关键在于简单的基础操作

// 给你三个 正 整数 num1 ，num2 和 num3 。
// 数字 num1 ，num2 和 num3 的数字答案 key 是一个四位数，定义如下：

// 一开始，如果有数字 少于 四位数，给它补 前导 0 。
// 答案 key 的第 i 个数位（1 <= i <= 4）为 num1 ，num2 和 num3 第 i 个数位中的 最小 值。

// 请你返回三个数字 没有 前导 0 的数字答案。

class Solution {
public:
    int generateKey(int num1, int num2, int num3) {
        int key = 0;
        for (int p = 1; num1 && num2 && num3; p *= 10) {
            key += min({num1 % 10, num2 % 10, num3 % 10}) * p;
            num1 /= 10;
            num2 /= 10;
            num3 /= 10;
        }
        return key;
    }
};

// 方法一：枚举
// 思路与算法:
// 我们可以从低到高枚举三个数的数位，三者的最小值就是答案 key 对应数位上的值。无需补充前导 0，因为当某个数在当前枚举的数位上没有值时，后续数位的最小值都为 0，对于答案 key 就是需要删去的前导 0。



// 复杂度分析
// 时间复杂度：O(n)，其中 n 是 key 的数位长度。
// 空间复杂度：O(1)。