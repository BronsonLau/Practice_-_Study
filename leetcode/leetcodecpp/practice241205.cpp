// 3001. 捕获黑皇后需要的最少移动次数
// 现有一个下标从 1 开始的 8 x 8 棋盘，上面有 3 枚棋子。

// 给你 6 个整数 a 、b 、c 、d 、e 和 f ，其中：

// (a, b) 表示白色车的位置。
// (c, d) 表示白色象的位置。
// (e, f) 表示黑皇后的位置。
// 假定你只能移动白色棋子，返回捕获黑皇后所需的最少移动次数。

// 请注意：

// 车可以向垂直或水平方向移动任意数量的格子，但不能跳过其他棋子。
// 象可以沿对角线方向移动任意数量的格子，但不能跳过其他棋子。
// 如果车或象能移向皇后所在的格子，则认为它们可以捕获皇后。
// 皇后不能移动。

class Solution {
public:
    int minMovesToCaptureTheQueen(int a, int b, int c, int d, int e, int f) {
        // 车与皇后处在同一行，且中间没有象
        if (a == e && (c != a || d <= min(b, f) || d >= max(b, f))) {
            return 1;
        }
        // 车与皇后处在同一列，且中间没有象
        if (b == f && (d != b || c <= min(a, e) || c >= max(a, e))) {
            return 1;
        }
        // 象、皇后处在同一条对角线，且中间没有车
        if (abs(c - e) == abs(d - f) && ((c - e) * (b - f) != (a - e) * (d - f) 
            || a < min(c, e) || a > max(c, e))) {
            return 1;
        }
        return 2;
    }
};

// 思路与算法

// 根据棋盘中 车 的移动规则可以知道，对于棋盘中任意的位置 (x,y)，位置 (i,j) 的 车 至多需要 2 步即可移动到指定位置 (x,y)，移动方法如下：

// 对于 车 来说，可以从起始位置 (i,j) 先垂直移动到 (x,j)，再水平移动到 (x,y)，或者先水平移动到 (i,y)，再垂直移动到 (x,y)；
// 如果 白色象、黑皇后 处在同一条对角线或者 白色车、黑皇后 处于同一条线上，此时可能只需要 1 次移动即可捕获 黑皇后，根据题意分析如下：

// 如果 白色象 与 黑皇后 处在同一条对角线时，且此时该路径上无 白色车 阻挡时，此时只需移动 1 次即可捕获 黑皇后；

// 如果 白色车 与 黑皇后 处在同一行或者同一列时，且此时二者移动路线之间无 白色象 阻挡时，此时只需移动 1 次即可捕获 黑皇后；

// 其余情况下，白色车 最多需要 2 次移动即可捕获 黑皇后；


